`python
import numpy as np

# 1. Import the numpy package under the name `np`
import numpy as np

# 2. Print the numpy version and the configuration
print("NumPy version:", np.version)
print(np.show_config())

# 3. Create a null vector of size 10
null_vector = np.zeros(10)
print(null_vector)

# 4. How to find the memory size of any array
print(null_vector.nbytes)

# 5. How to get the documentation of the numpy add function from the command line?
print(np.info(np.add))

# 6. Create a null vector of size 10 but the fifth value which is 1
vector_with_one = np.zeros(10)
vector_with_one[4] = 1
print(vector_with_one)

# 7. Create a vector with values ranging from 10 to 49
vector_range = np.arange(10, 50)
print(vector_range)

# 8. Reverse a vector (first element becomes last)
reversed_vector = vector_range[::-1]
print(reversed_vector)

# 9. Create a 3x3 matrix with values ranging from 0 to 8
matrix_3x3 = np.arange(9).reshape(3, 3)
print(matrix_3x3)

# 10. Find indices of non-zero elements from [1,2,0,0,4,0]
arr = np.array([1, 2, 0, 0, 4, 0])
non_zero_indices = np.nonzero(arr)[0]
print(non_zero_indices)

# 11. Create a 3x3 identity matrix
identity_matrix = np.eye(3)
print(identity_matrix)

# 12. Create a 3x3x3 array with random values
random_3d = np.random.random((3, 3, 3))
print(random_3d)

# 13. Create a 10x10 array with random values and find the minimum and maximum values
random_10x10 = np.random.random((10, 10))
min_val = random_10x10.min()
max_val = random_10x10.max()
print(f"Minimum: {min_val}")
print(f"Maximum: {max_val}")

# 14. Create a random vector of size 30 and find the mean value
random_vector = np.random.random(30)
mean_val = random_vector.mean()
print(mean_val)

# 15. Create a 2d array with 1 on the border and 0 inside
border_array = np.ones((5, 5))
border_array[1:-1, 1:-1] = 0
print(border_array)

# 16. How to add a border (filled with 0's) around an existing array?
original_array = np.ones((3, 3))
padded_array = np.pad(original_array, pad_width=1, mode='constant', constant_values=0)
print(padded_array)

# 17. What is the result of the following expression?
rng = np.random.default_rng(42)
random_nums = rng.random(5)
print(random_nums)

# 18. Create a 5x5 matrix with values 1,2,3,4 just below the diagonal
matrix_below_diag = np.diag([1, 2, 3, 4], k=-1)
print(matrix_below_diag)

# 19. Create a 8x8 matrix and fill it with a checkerboard pattern
checkerboard = np.zeros((8, 8), dtype=int)
checkerboard[1::2, ::2] = 1
checkerboard[::2, 1::2] = 1
print(checkerboard)

# 20. Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element?
shape = (6, 7, 8)
index_100th = np.unravel_index(99, shape)
print(index_100th)

# 21. Create a checkerboard 8x8 matrix using the tile function
base_pattern = np.array([[0, 1], [1, 0]])
checkerboard_tile = np.tile(base_pattern, (4, 4))
print(checkerboard_tile)

# 22. Normalize a 5x5 random matrix
random_matrix = np.random.random((5, 5))
normalized_matrix = (random_matrix - random_matrix.min()) / (random_matrix.max() - random_matrix.min())
print(normalized_matrix)

# 23. Create a custom dtype that describes a color as four unsigned bytes (RGBA)
color_dtype = np.dtype([('R', 'u1'), ('G', 'u1'), ('B', 'u1'), ('A', 'u1')])
print(color_dtype)

# 24. Multiply a 5x3 matrix by a 3x2 matrix (real matrix product)
matrix_5x3 = np.random.random((5, 3))
matrix_3x2 = np.random.random((3, 2))
matrix_product = np.dot(matrix_5x3, matrix_3x2)
print(matrix_product)

# 25. Given a 1D array, negate all elements which are between 3 and 8, in place
arr_1d = np.arange(10)
arr_1d[(arr_1d > 3) & (arr_1d < 8)] *= -1
print(arr_1d)

# 26. What is the output of the following script?
result = sum(range(5), -1)
print(result)

# 27. Consider an integer vector Z, which of these expressions are legal?
Z = np.array([1, 2, 3])
print("Z*Z:", Z*Z)
print("Z <= Z:", Z <= Z)
print("ZZ:", ZZ)
print("2<<Z>>2:", 2<<Z>>2)
print("Z<-Z:", Z<-Z)
print("1j*Z:", 1j*Z)

# 28. What are the result of the following expressions?
print("np.array(0) / np.array(0):", np.array(0) / np.array(0))
print("np.array(0) // np.array(0):", np.array(0) // np.array(0))
print("np.array([np.nan]).astype(int).astype(float):", np.array([np.nan]).astype(int).astype(float))

# 29. How to round away from zero a float array?
arr = np.array([-3.7, -2.1, 1.5, 2.9])
rounded = np.copysign(np.ceil(np.abs(arr)), arr)
print(rounded)

# 30. How to find common values between two arrays?
arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([3, 4, 5, 6, 7])
common = np.intersect1d(arr1, arr2)
print(common)

# 31. How to ignore all numpy warnings (not recommended)?
np.seterr(all='ignore')
print("Warnings ignored")

# 32. Is the following expressions true?
result = np.sqrt(-1) == np.emath.sqrt(-1)
print(result)

# 33. How to get the dates of yesterday, today and tomorrow?
today = np.datetime64('today')
yesterday = today - np.timedelta64(1, 'D')
tomorrow = today + np.timedelta64(1, 'D')
print("Yesterday:", yesterday)
print("Today:", today)
print("Tomorrow:", tomorrow)
`
